// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using conSpektas.Domain;

namespace conSpektas.Domain.Migrations
{
    [DbContext(typeof(ConspectContext))]
    partial class ConspectContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("conSpektas.Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("conSpektas.Domain.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ConspectId");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ConspectId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("conSpektas.Domain.Entities.CommentRating", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("CommentId");

                    b.Property<int>("Value");

                    b.HasKey("UserId", "CommentId");

                    b.HasIndex("CommentId");

                    b.ToTable("CommentsRatings");
                });

            modelBuilder.Entity("conSpektas.Domain.Entities.Conspect", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .IsRequired();

                    b.Property<DateTime>("LatestEditDate");

                    b.Property<int?>("ParentId");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ParentId")
                        .IsUnique()
                        .HasFilter("[ParentId] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("Conspects");
                });

            modelBuilder.Entity("conSpektas.Domain.Entities.ConspectCategory", b =>
                {
                    b.Property<int>("CategoryId");

                    b.Property<int>("ConspectId");

                    b.HasKey("CategoryId", "ConspectId");

                    b.HasIndex("ConspectId");

                    b.ToTable("ConspectsCategories");
                });

            modelBuilder.Entity("conSpektas.Domain.Entities.ConspectRating", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("ConspectId");

                    b.Property<int>("Value");

                    b.HasKey("UserId", "ConspectId");

                    b.HasIndex("ConspectId");

                    b.ToTable("ConspectsRatings");
                });

            modelBuilder.Entity("conSpektas.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Institution")
                        .HasMaxLength(255);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("PasswordHash")
                        .IsRequired();

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("conSpektas.Domain.Entities.Comment", b =>
                {
                    b.HasOne("conSpektas.Domain.Entities.Conspect", "Conspect")
                        .WithMany("Comments")
                        .HasForeignKey("ConspectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("conSpektas.Domain.Entities.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("conSpektas.Domain.Entities.CommentRating", b =>
                {
                    b.HasOne("conSpektas.Domain.Entities.Comment", "Comment")
                        .WithMany("Ratings")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("conSpektas.Domain.Entities.User", "User")
                        .WithMany("CommentRatings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("conSpektas.Domain.Entities.Conspect", b =>
                {
                    b.HasOne("conSpektas.Domain.Entities.Conspect", "Parent")
                        .WithOne()
                        .HasForeignKey("conSpektas.Domain.Entities.Conspect", "ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("conSpektas.Domain.Entities.User", "User")
                        .WithMany("Conspects")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("conSpektas.Domain.Entities.ConspectCategory", b =>
                {
                    b.HasOne("conSpektas.Domain.Entities.Category", "Category")
                        .WithMany("Conspects")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("conSpektas.Domain.Entities.Conspect", "Conspect")
                        .WithMany("Categories")
                        .HasForeignKey("ConspectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("conSpektas.Domain.Entities.ConspectRating", b =>
                {
                    b.HasOne("conSpektas.Domain.Entities.Conspect", "Conspect")
                        .WithMany("Ratings")
                        .HasForeignKey("ConspectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("conSpektas.Domain.Entities.User", "User")
                        .WithMany("ConspectRatings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
